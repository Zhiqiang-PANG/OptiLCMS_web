% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Spectra_import.R
\name{ImportRawMSData}
\alias{ImportRawMSData}
\title{Import raw MS data}
\usage{
ImportRawMSData(
  mSet = NULL,
  foldername,
  mode = "onDisk",
  ncores = 4,
  plotSettings,
  running.controller = NULL
)
}
\arguments{
\item{mSet}{mSet Object, can be optional. Usually generated by InitDataObjects("spec", "raw", FALSE) before the data import.}

\item{foldername}{Character, input the file path to the folder containing
the raw MS spectra to be processed.}

\item{mode}{Character, the data input mode. Default is "onDisk" to avoid memory crash. "inMemory" will
absorb data into the memory.}

\item{ncores}{Numeric, a value used to defined the parallel cores.}

\item{plotSettings}{List, plotting parameters produced by SetPlotParam Function. "plot.opts" can be added through this
function for samples numbers for plotting. Defalut is "default", "all" will apply all samples for plotting and may cause
memory crash, especially for large sample dataset.}

\item{running.controller}{The resuming pipeline running controller. Optional. Don't need to define by hand.}
}
\description{
This function handles the reading in of
raw MS data (.mzML, .CDF and .mzXML). Users must set
their working directory to the folder containing their raw
data, divided into two subfolders named their desired group labels. The
function will output two chromatograms into the user's working directory, a
base peak intensity chromatogram (BPIC) and a total ion
chromatogram (TIC). Further, this function sets the number of cores
to be used for parallel processing. It first determines the number of cores
within a user's computer and then sets it that number/2.
}
\examples{
## load googledrive package to download example data
# library("googledrive");

## Set data folder
# data_folder_Sample <- "~/Data_IBD";
# data_folder_QC <- "~/Data_IBD/QC";
# temp <- tempfile(fileext = ".zip");

## Please authorize the package to download the data from web
# dl <- drive_download(as_id("1CjEPed1WZrwd5T3Ovuic1KVF-Uz13NjO"), path = temp, overwrite = TRUE);
# out <- unzip(temp, exdir = data_folder_Sample);
# out;
#### Running as regular procedure: step by step
## Extract ROI for parameters' optimization
# mSet <- PerformROIExtraction(datapath = data_folder_QC, rt.idx = 0.95, plot = F, rmConts = F);
## Perform the optimization
# best_parameters <- PerformParamsOptimization(mSet = mSet, SetPeakParam(), ncore = 4);
## Perform data import of all samples
# mSet <- ImportRawMSData(mSet = mSet, foldername = data_folder_Sample, plotSettings = SetPlotParam(Plot=T));
## Perform peak profiling
# mSet <- PerformPeakProfiling(mSet = mSet, Params = param, plotSettings = SetPlotParam(Plot=T));
## Set annotation parameters
# annParams <- SetAnnotationParam(polarity = 'negative', mz_abs_add = 0.025);
## Perform peak annotation
# mSet <- PerformPeakAnnotation(mSet = mSet, annotaParam = annParams, ncore =1);
## Format the peak table
# maPeaks <- FormatPeakList(mSet = mSet, annParams, filtIso =F, filtAdducts = FALSE,missPercent = 1);

#### Running as resumable procedure: seamless pipeline
## Initialize running plan
plan <- InitializaPlan("raw_opt","~/Data_IBD/")
## define/set running plan
plan <- running.plan(plan,
                     data_folder_QC <- data_folder_QC,
                     mSet <- PerformROIExtraction(datapath = data_folder_QC, rt.idx = 0.95, plot = F, rmConts = F, running.controller = rc),
                     param_initial <- SetPeakParam(),
                     best_parameters <- PerformParamsOptimization(mSet = mSet, param_initial, ncore = 2, running.controller = rc),
                     data_folder_Sample <- '',
                     param <- best_parameters,
                     plotSettings1 <- SetPlotParam(Plot=T),
                     plotSettings2 <- SetPlotParam(Plot=T),
                     mSet <- ImportRawMSData(mSet = mSet, foldername = data_folder_Sample, plotSettings = plotSettings1, running.controller = rc),
                     mSet <- PerformPeakProfiling(mSet = mSet, Params = param, plotSettings = plotSettings2, running.controller = rc),
                     annParams <- SetAnnotationParam(polarity = 'negative', mz_abs_add = 0.025),
                     mSet <- PerformPeakAnnotation(mSet = mSet, annotaParam = annParams, ncore =1, running.controller = rc),
                     maPeaks <- FormatPeakList(mSet = mSet, annParams, filtIso =F, filtAdducts = FALSE,missPercent = 1));
## Execute the defined plan
# ExecutePlan(plan)
}
\author{
Zhiqiang Pang \email{zhiqiang.pang@mail.mcgill.ca}, Jasmine Chong \email{jasmine.chong@mail.mcgill.ca},
Mai Yamamoto \email{yamamoto.mai@mail.mcgill.ca}, and Jeff Xia \email{jeff.xia@mcgill.ca}
McGill University, Canada
License: GNU GPL (>= 2)
}
