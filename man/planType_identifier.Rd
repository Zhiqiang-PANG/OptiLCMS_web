% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Resume_functions.R
\name{planType_identifier}
\alias{planType_identifier}
\title{controller.modifier <- function(new_command, last_command, plan){

functions <- sapply(1:length(plan[\link{length(plan)}]),FUN=function(i){plan[\link{length(plan)}][\link{i}][\link{3}][\link{1}]});
data_trim_order <- which(functions=="PerformDataTrimming" | functions=="PerformROIExtraction");
dara_ms_order <- which(functions=="ImportRawMSData");

###-------------Operators definition ------------//

#' operators_1 : SetPeakParam ~ PerformParamsOptimization;
#' operators_2 : data_folder_trainning ~ PerformDataTrimming;
#' operators_3 : data_folder_sample ~ peak_profiling;
#' operators_4 : PerformPeakProfiling ~ PerformPeakAnnotation;

#' others_1 c1 : SetPeakParam;
#' others_1 c2 : ImportRawData - reading part;
#' others_1 c3 : ImportRawData - plotting part;
#' others_1 c4 : Start to do annotation.

##----------------------------------------------//Module 1 - Detect whether the tranning data folder has been changed

if (!identical(data_trim_order, integer(0))){\preformatted{if ((class(new_command[[3]]) == "character") & (plan[[length(plan)]][[data_trim_order]][[3]][[2]] == new_command[[2]]))\{
  if (new_command[[3]] != last_command[[3]])\{
    # to deal with the case the data folder did change
    plan$running.controller$data_trim <- c(T,T,T,T);
    names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
    plan$running.controller$operators[["operators_2"]] <- T;
  \} else if(OptiFileChanged(last_command[[3]]))\{
    # to deal with the case some files are deleted or added for the same folder
    plan$running.controller$data_trim <- c(T,T,T,T);
    names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
    plan$running.controller$operators[["operators_2"]] <- T;
  \}
\}
}

}Module 2 - Detect whether the params of datatrimming has been changed

if (new_command[\link{3}][\link{1}] == "PerformDataTrimming" | new_command[\link{3}][\link{1}] == "PerformROIExtraction"){\preformatted{data_folder_funciton_order <- which(sapply(1:length(plan[[length(plan)]]),
                                           FUN = function(x)\{
                                             plan[[length(plan)]][[x]][[2]]\})==new_command[[3]][[2]] & 
                                      as.character(sapply(1:length(plan[[length(plan)]]),
                                                          FUN = function(x)\{plan[[length(plan)]][[x]][[1]]\})) == "`<-`")

if ((plan[[length(plan)]][[data_folder_funciton_order]] != plan[[length(plan)-1]][[data_folder_funciton_order]]) | 
    plan$running.controller$operators[["operators_2"]]) \{
  # To make sure the data did change or not. If the data changed, re-run all.
  plan$running.controller$data_trim <- c(T,T,T,T);
  names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
  
\} else if (new_command == last_command) \{
  # If the setting did not change, skip the trim step
  if(.on.public.web)\{
    # retained for further process 
    # If on web, to detect whether the rmConts (remove contaminants param changed or not !)
    print("run here : web version - param change detection !-")
    
    envir.path <- paste0(getwd(),"/temp/envir");
    envir_tmp <- readRDS(paste0(envir.path,"/envir.rds"));
    last_param <- envir_tmp[["param"]];
    load("params.rda");
    new_param <- peakParams;
    
    if(is.null(last_param))\{ # This is designed for the case that param have not been finsihed when killed
      
      print("run here : param phase killed last time ! trim phase-")
      plan$running.controller$data_trim <- c(T,T,T,T);
      names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
      
    \} else if (last_param[["rmConts"]] != new_param[["rmConts"]]) \{
      
      print("run here : param rmConts changed ! trim phase-")
      plan$running.controller$data_trim <- c(F,T,T,T);
      names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
    \}
    
  \} else \{
    # Otherwise, no need to detect
    plan$running.controller$data_trim <- c(F,F,F,F);
    names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
  \}
  
\} else \{
  # If the setting did change, skip some steps in different cases
  for (i in 2:length(new_command[[3]]))\{
    for (j in 2:length(last_command[[3]]))\{
      if ((names(new_command[[3]])[i] == names(last_command[[3]])[j]) && 
          (new_command[[3]][[i]] != last_command[[3]][[j]]))\{
        
        if (names(new_command[[3]])[i] == "datapath" | (names(new_command[[3]])[i] == "" & i ==1))\{
          plan$running.controller$data_trim <- c(T,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "mode" | (names(new_command[[3]])[i] == "" & i ==2))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "mz" | (names(new_command[[3]])[i] == "" & i ==4))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "mzdiff" | (names(new_command[[3]])[i] == "" & i ==5))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "rt" | (names(new_command[[3]])[i] == "" & i ==6))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "rtdiff" | (names(new_command[[3]])[i] == "" & i ==7))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "rt.idx" | (names(new_command[[3]])[i] == "" & i ==8))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "write" | (names(new_command[[3]])[i] == "" & i ==3))\{
          plan$running.controller$data_trim <- c(F,F,T,F);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "plot" | (names(new_command[[3]])[i] == "" & i ==9))\{
          plan$running.controller$data_trim <- c(F,F,F,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
      \};
    \};
  \};
\};
}

};

if (new_command[\link{3}][\link{1}] == "SetPeakParam"){\preformatted{if (new_command != last_command) \{
  
  plan$running.controller$others_1[1] <- T;
  plan$running.controller$operators[["operators_1"]] <- T;
  
\} else if(new_command == last_command & .on.public.web) \{
  
  #load("params.rda");
  plan$running.controller$operators[["operators_1"]] <- F; # switch of the operator for optimization
  plan$running.controller$others_1[1] <- F; # switch of the operator for optimization
  
\};
}

};

if (new_command[\link{3}][\link{1}] == "PerformParamsOptimization"){\preformatted{if (any(plan$running.controller$data_trim[c(1,2)]))\{
  plan$running.controller$others_1[1] <- T;
  
\} else if (plan$running.controller$operators[["operators_1"]]) \{
  plan$running.controller$others_1[1] <- T;
  
\} else \{
  plan$running.controller$others_1[1] <- F;
\};
}

};Module 3 - Dectect whether the raw ms data folder has been changed

if (!identical(dara_ms_order, integer(0))){
if ((class(new_command[\link{3}]) == "character") & (plan[\link{length(plan)}][\link{dara_ms_order}][\link{3}][\link{2}] == new_command[\link{2}])){
if (new_command[\link{3}] != last_command[\link{3}] | ProcessFileChanged(last_command[\link{3}])){
# if the data folder changed at local or the files changed inside the folder
plan$running.controller$peak_profiling <- c(T,T,T,T);
names(plan$running.controller$peak_profiling) <- c("c1","c2","c3","c4");
plan$running.controller$operators[\link{"operators_3"}] <- T;\preformatted{  \} else if(new_command[[3]] == last_command[[3]] & .on.public.web)\{ # to identify if the data folder changed at local
    # TODO: need to correct this issue.
    rawFileNames <- paste0(getwd(),"/temp/plan");
    rawfilenms_last <- readRDS(paste0(rawFileNames,"/rawfilenms_",.plan_count-1,".rds"));
    rawfilenms_new <- readRDS(paste0(rawFileNames,"/rawfilenms_",.plan_count,".rds"));
    
    if(identical(setdiff(rawfilenms_last,rawfilenms_new), character(0)))\{ 
      # if files included didn't change
      plan$running.controller$operators[["operators_3"]] <- F;
      
    \} else \{
      # if files included did change
      
      #plan$running.controller$data_trim[["c1"]] <- T; 
      #plan$running.controller$others_1[["c1"]] <- T; 
      # TODO: to avoid re-do the trimming when QC did not change;
      
      plan$running.controller$operators[["operators_3"]] <- T;
      plan$running.controller$peak_profiling <- c(T,T,T,T);
      names(plan$running.controller$peak_profiling) <- c("c1","c2","c3","c4"); 
      
    \}
    
  \}
\}
}

};Module 4 - Detect whether the params of data Import has been changed

if (new_command[\link{3}][\link{1}] == "ImportRawMSData"){\preformatted{data_folder_sample_order <- which(sapply(1:length(plan[[length(plan)]]),
                                         FUN = function(x)\{plan[[length(plan)]][[x]][[2]]\})==new_command[[3]][[2]] & 
                                    as.character(sapply(1:length(plan[[length(plan)]]),
                                                        FUN = function(x)\{plan[[length(plan)]][[x]][[1]]\})) == "`<-`")
}}
\usage{
planType_identifier(plan)
}
\description{
controller.modifier <- function(new_command, last_command, plan){

functions <- sapply(1:length(plan[\link{length(plan)}]),FUN=function(i){plan[\link{length(plan)}][\link{i}][\link{3}][\link{1}]});
data_trim_order <- which(functions=="PerformDataTrimming" | functions=="PerformROIExtraction");
dara_ms_order <- which(functions=="ImportRawMSData");

###-------------Operators definition ------------//

#' operators_1 : SetPeakParam ~ PerformParamsOptimization;
#' operators_2 : data_folder_trainning ~ PerformDataTrimming;
#' operators_3 : data_folder_sample ~ peak_profiling;
#' operators_4 : PerformPeakProfiling ~ PerformPeakAnnotation;

#' others_1 c1 : SetPeakParam;
#' others_1 c2 : ImportRawData - reading part;
#' others_1 c3 : ImportRawData - plotting part;
#' others_1 c4 : Start to do annotation.

##----------------------------------------------//Module 1 - Detect whether the tranning data folder has been changed

if (!identical(data_trim_order, integer(0))){\preformatted{if ((class(new_command[[3]]) == "character") & (plan[[length(plan)]][[data_trim_order]][[3]][[2]] == new_command[[2]]))\{
  if (new_command[[3]] != last_command[[3]])\{
    # to deal with the case the data folder did change
    plan$running.controller$data_trim <- c(T,T,T,T);
    names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
    plan$running.controller$operators[["operators_2"]] <- T;
  \} else if(OptiFileChanged(last_command[[3]]))\{
    # to deal with the case some files are deleted or added for the same folder
    plan$running.controller$data_trim <- c(T,T,T,T);
    names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
    plan$running.controller$operators[["operators_2"]] <- T;
  \}
\}
}

}Module 2 - Detect whether the params of datatrimming has been changed

if (new_command[\link{3}][\link{1}] == "PerformDataTrimming" | new_command[\link{3}][\link{1}] == "PerformROIExtraction"){\preformatted{data_folder_funciton_order <- which(sapply(1:length(plan[[length(plan)]]),
                                           FUN = function(x)\{
                                             plan[[length(plan)]][[x]][[2]]\})==new_command[[3]][[2]] & 
                                      as.character(sapply(1:length(plan[[length(plan)]]),
                                                          FUN = function(x)\{plan[[length(plan)]][[x]][[1]]\})) == "`<-`")

if ((plan[[length(plan)]][[data_folder_funciton_order]] != plan[[length(plan)-1]][[data_folder_funciton_order]]) | 
    plan$running.controller$operators[["operators_2"]]) \{
  # To make sure the data did change or not. If the data changed, re-run all.
  plan$running.controller$data_trim <- c(T,T,T,T);
  names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
  
\} else if (new_command == last_command) \{
  # If the setting did not change, skip the trim step
  if(.on.public.web)\{
    # retained for further process 
    # If on web, to detect whether the rmConts (remove contaminants param changed or not !)
    print("run here : web version - param change detection !-")
    
    envir.path <- paste0(getwd(),"/temp/envir");
    envir_tmp <- readRDS(paste0(envir.path,"/envir.rds"));
    last_param <- envir_tmp[["param"]];
    load("params.rda");
    new_param <- peakParams;
    
    if(is.null(last_param))\{ # This is designed for the case that param have not been finsihed when killed
      
      print("run here : param phase killed last time ! trim phase-")
      plan$running.controller$data_trim <- c(T,T,T,T);
      names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
      
    \} else if (last_param[["rmConts"]] != new_param[["rmConts"]]) \{
      
      print("run here : param rmConts changed ! trim phase-")
      plan$running.controller$data_trim <- c(F,T,T,T);
      names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
    \}
    
  \} else \{
    # Otherwise, no need to detect
    plan$running.controller$data_trim <- c(F,F,F,F);
    names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
  \}
  
\} else \{
  # If the setting did change, skip some steps in different cases
  for (i in 2:length(new_command[[3]]))\{
    for (j in 2:length(last_command[[3]]))\{
      if ((names(new_command[[3]])[i] == names(last_command[[3]])[j]) && 
          (new_command[[3]][[i]] != last_command[[3]][[j]]))\{
        
        if (names(new_command[[3]])[i] == "datapath" | (names(new_command[[3]])[i] == "" & i ==1))\{
          plan$running.controller$data_trim <- c(T,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "mode" | (names(new_command[[3]])[i] == "" & i ==2))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "mz" | (names(new_command[[3]])[i] == "" & i ==4))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "mzdiff" | (names(new_command[[3]])[i] == "" & i ==5))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "rt" | (names(new_command[[3]])[i] == "" & i ==6))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "rtdiff" | (names(new_command[[3]])[i] == "" & i ==7))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "rt.idx" | (names(new_command[[3]])[i] == "" & i ==8))\{
          plan$running.controller$data_trim <- c(F,T,T,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "write" | (names(new_command[[3]])[i] == "" & i ==3))\{
          plan$running.controller$data_trim <- c(F,F,T,F);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
        
        if (names(new_command[[3]])[i] == "plot" | (names(new_command[[3]])[i] == "" & i ==9))\{
          plan$running.controller$data_trim <- c(F,F,F,T);
          names(plan$running.controller$data_trim) <- c("c1","c2","c3","c4");
        \};
      \};
    \};
  \};
\};
}

};

if (new_command[\link{3}][\link{1}] == "SetPeakParam"){\preformatted{if (new_command != last_command) \{
  
  plan$running.controller$others_1[1] <- T;
  plan$running.controller$operators[["operators_1"]] <- T;
  
\} else if(new_command == last_command & .on.public.web) \{
  
  #load("params.rda");
  plan$running.controller$operators[["operators_1"]] <- F; # switch of the operator for optimization
  plan$running.controller$others_1[1] <- F; # switch of the operator for optimization
  
\};
}

};

if (new_command[\link{3}][\link{1}] == "PerformParamsOptimization"){\preformatted{if (any(plan$running.controller$data_trim[c(1,2)]))\{
  plan$running.controller$others_1[1] <- T;
  
\} else if (plan$running.controller$operators[["operators_1"]]) \{
  plan$running.controller$others_1[1] <- T;
  
\} else \{
  plan$running.controller$others_1[1] <- F;
\};
}

};Module 3 - Dectect whether the raw ms data folder has been changed

if (!identical(dara_ms_order, integer(0))){
if ((class(new_command[\link{3}]) == "character") & (plan[\link{length(plan)}][\link{dara_ms_order}][\link{3}][\link{2}] == new_command[\link{2}])){
if (new_command[\link{3}] != last_command[\link{3}] | ProcessFileChanged(last_command[\link{3}])){
# if the data folder changed at local or the files changed inside the folder
plan$running.controller$peak_profiling <- c(T,T,T,T);
names(plan$running.controller$peak_profiling) <- c("c1","c2","c3","c4");
plan$running.controller$operators[\link{"operators_3"}] <- T;\preformatted{  \} else if(new_command[[3]] == last_command[[3]] & .on.public.web)\{ # to identify if the data folder changed at local
    # TODO: need to correct this issue.
    rawFileNames <- paste0(getwd(),"/temp/plan");
    rawfilenms_last <- readRDS(paste0(rawFileNames,"/rawfilenms_",.plan_count-1,".rds"));
    rawfilenms_new <- readRDS(paste0(rawFileNames,"/rawfilenms_",.plan_count,".rds"));
    
    if(identical(setdiff(rawfilenms_last,rawfilenms_new), character(0)))\{ 
      # if files included didn't change
      plan$running.controller$operators[["operators_3"]] <- F;
      
    \} else \{
      # if files included did change
      
      #plan$running.controller$data_trim[["c1"]] <- T; 
      #plan$running.controller$others_1[["c1"]] <- T; 
      # TODO: to avoid re-do the trimming when QC did not change;
      
      plan$running.controller$operators[["operators_3"]] <- T;
      plan$running.controller$peak_profiling <- c(T,T,T,T);
      names(plan$running.controller$peak_profiling) <- c("c1","c2","c3","c4"); 
      
    \}
    
  \}
\}
}

};Module 4 - Detect whether the params of data Import has been changed

if (new_command[\link{3}][\link{1}] == "ImportRawMSData"){\preformatted{data_folder_sample_order <- which(sapply(1:length(plan[[length(plan)]]),
                                         FUN = function(x)\{plan[[length(plan)]][[x]][[2]]\})==new_command[[3]][[2]] & 
                                    as.character(sapply(1:length(plan[[length(plan)]]),
                                                        FUN = function(x)\{plan[[length(plan)]][[x]][[1]]\})) == "`<-`")
}
}
\section{Module 5 - Detect whether the params of peak profiling +  annotation has been changed}{
if (new_command[\link{3}][\link{1}] == "PerformPeakProfiling"){
print("run here PerformPeakProfiling + annotation parame changes detection !-");\preformatted{# TO get the position of functions defined the 'param'
profiling_param_order <- which(sapply(1:length(plan[[length(plan)]]),FUN = function(x)\{plan[[length(plan)]][[x]][[2]]\})==new_command[[3]][[3]] & 
                                 as.character(sapply(1:length(plan[[length(plan)]]),FUN = function(x)\{plan[[length(plan)]][[x]][[1]]\})) == "`<-`")


if (!identical(which(names(new_command[[3]])=="plotSettings"),integer(0)))\{
  plot_function2_order <- which(new_command[[3]][[which(names(new_command[[3]])=="plotSettings")]] == sapply(plan[[length(plan)]], FUN=function(x)\{x[[2]]\}));
\} else \{
  plot_function2_order <- which(new_command[[3]][[4]] == sapply(plan[[length(plan)]], FUN=function(x)\{x[[2]]\}));
\};

if (plan$running.controller$others_1[[2]])\{ 
  # If data Import step (reading) was excecuted, the profiling step also has to be run/re-run;
  plan[["running.controller"]][["peak_profiling"]] <- c(T,T,T,T);
  names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
  
\} else if (.on.public.web & new_command == last_command) \{
  # If the param setting did change, run some profiling steps (web version)
  
  print("run here : web version - param change detection !-")
  
  envir.path <- paste0(getwd(),"/temp/envir");
  envir_tmp <- readRDS(paste0(envir.path,"/envir.rds"));
  last_param <- envir_tmp[["param"]];
  load("params.rda");
  new_param <- peakParams;
  
  if(is.null(last_param))\{ # This is designed for the case that param have not been finsihed when killed
    
    print("run here : param phase killed last time !-")
    
    plan[["running.controller"]][["peak_profiling"]] <- c(T,T,T,T);
    names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
    
    plan[["running.controller"]][["operators"]][[4]] <- T;
    names(plan[["running.controller"]][["operators"]][[4]]) <- "operators_4";
    
  \} else \{
    
    identifiers <- NULL;
    
    for (i in 1:length(new_param))\{
      for (j in 1:length(last_param))\{
        if (names(new_param[i])==names(last_param[j]) & new_param[[i]] != last_param[[j]])\{
          identifiers <- c(identifiers, names(new_param[i]))
        \}
      \}
    \}
    
    switch.path <- paste0(getwd(),"/temp/plan");      
    new_optimize_switch <- readRDS(paste0(switch.path,"/optimize_switch_",.plan_count,".rds"));
    last_optimize_switch <- readRDS(paste0(switch.path,"/optimize_switch_",.plan_count-1,".rds"));
    
    if(new_optimize_switch == T & 
       last_optimize_switch == T & 
       !plan$running.controller$operators[["operators_2"]] & 
       !plan$running.controller$operators[["operators_3"]])\{
      
      identifiers <- NULL;
      
    \} else if(plan$running.controller$operators[["operators_3"]] | plan$running.controller$operators[["operators_2"]])\{
      
      # if data files included changed, re-run everything!
      print("run here : data files included changed !")
      
      plan[["running.controller"]][["peak_profiling"]] <- c(T,T,T,T);
      names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
      
      plan[["running.controller"]][["operators"]][[4]] <- T;
      names(plan[["running.controller"]][["operators"]][[4]]) <- "operators_4";
      
    \}
    
    if(is.null(identifiers))\{
      #0. No parameters changed
      plan[["running.controller"]][["peak_profiling"]] <- c(F,F,F,F);
      names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
      
    \} else if (any(identifiers \%in\% c("min_peakwidth","max_peakwidth","mzdiff","ppm","noise","prefilter","value_of_prefilter",
                                      "Peak_method","snthresh","fwhm","sigma","steps")))\{
      
      print("run here : picking parameters change found !-")
      # 1. change picking parameters
      plan[["running.controller"]][["peak_profiling"]] <- c(T,T,T,T);
      names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
      
      plan[["running.controller"]][["operators"]][[4]] <- T;
      names(plan[["running.controller"]][["operators"]][[4]]) <- "operators_4";
      
    \} else if (any(identifiers \%in\% c("bw","RT_method","minFraction","minSamples","maxFeatures","family","smooth",
                                      "span","integrate","mzCenterFun","verbose.columns","fitgauss")))\{
      
      print("run here : alignment parameters change found !-")
      # 2. change alignment parameters
      plan[["running.controller"]][["peak_profiling"]] <- c(F,T,T,T);
      names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
      
      plan[["running.controller"]][["operators"]][[4]] <- T;
      names(plan[["running.controller"]][["operators"]][[4]]) <- "operators_4";
      
    \} else if(any(identifiers \%in\% c("polarity","perc_fwhm","mz_abs_iso","max_charge","max_iso","corr_eic_th","mz_abs_add")))\{
      
      print("run here : Annotation parameters change found !-");
      
      # 3. change Annotation parameters
      plan[["running.controller"]][["peak_profiling"]] <- c(F,F,F,F);
      names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
      
      plan[["running.controller"]][["operators"]][[4]] <- T;
      names(plan[["running.controller"]][["operators"]][[4]]) <- "operators_4";
      
    \};
    
  \} 
  
\} else if (plan[[length(plan)]][[profiling_param_order]] != plan[[length(plan)-1]][[profiling_param_order]]) \{
  # If the param setting did change, run some profiling steps (Package version)
  
  identifiers <- profiling_param_identifier(plan[[length(plan)]][[profiling_param_order]],
                                            plan[[length(plan)-1]][[profiling_param_order]]);
  print("run here -8------------------------------")
  # 1. change picking parameters
  
  if (any(identifiers \%in\% c("min_peakwidth","max_peakwidth","mzdiff","ppm","noise","prefilter","value_of_prefilter",
                             "Peak_method","snthresh","fwhm","sigma","steps")))\{
    plan[["running.controller"]][["peak_profiling"]] <- c(T,T,T,T);
    names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
  \};
  
  # 2. change alignment parameters
  
  if (any(identifiers \%in\% c("bw","RT_method","minFraction","minSamples","maxFeatures","family","smooth",
                             "span","integrate","mzCenterFun","verbose.columns","fitgauss")))\{
    plan[["running.controller"]][["peak_profiling"]] <- c(F,T,T,T);
    names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
  \};
  
  
\} else if (new_command == last_command) \{
  # If the setting did not change, skip the profiling step
  
  plan[["running.controller"]][["peak_profiling"]] <- c(F,F,F,F);
  names(plan[["running.controller"]][["peak_profiling"]]) <- c("c1","c2","c3","c4");
  
\} else \{
  # Some unexcepted cases appears. Re-run everything to make sure correctness
  print("run here : unexcepted cases appears - Re-run everything !-")
  plan[["running.controller"]][["peak_profiling"]] <- c(T,T,T,T);
\};

# peak_profiling: c4 is the plotting part
if ((plan[[length(plan)]][[plot_function2_order]] != plan[[length(plan)-1]][[plot_function2_order]]) & 
    (!any(plan[["running.controller"]][["peak_profiling"]][c(1:3)]))) \{
  
  print("run here -10------------------------------")
  plan[["running.controller"]][["peak_profiling"]][[4]] <- T;
  
\} else if(any(plan[["running.controller"]][["peak_profiling"]][c(1:3)])) \{
  
  print("run here -11------------------------------")
  plan[["running.controller"]][["peak_profiling"]][[4]] <- T;
  
\} else \{
  plan[["running.controller"]][["peak_profiling"]][[4]] <- F;
\};
}

}
}

\section{Module 6 - Detect whether annotation need to be re-run}{
if (new_command[\link{3}][\link{1}] == "SetAnnotationParam"){\preformatted{if (new_command != last_command) \{
  plan$running.controller$operators[[4]] <- T; # operators_4 for annotations
\};

if (any(plan$running.controller$peak_profiling[1:3]))\{
  plan$running.controller$operators[[4]] <- T;
\};
}

}
}

\section{Return the prepared plan for excuting}{

}

